@using WeFramework.Web.Models.Navigates
@model WeFramework.Web.Models.Navigates.NavigateModel

@{
    var ModelDisplayName = Html.DisplayNameForModel();
    ViewBag.Title = String.Concat(T("Edit"), ModelDisplayName);
}
@helper RenderParentNavigateOptions(NavigateModel navigate, int level)
{
if (Model.ID != navigate.ID)
{
        <option value="@navigate.ID" @(Model.ParentID == navigate.ID ? Html.Raw("selected") : null)>
            @for (int i = 0; i < level * 2; i++)
            {
                @:&nbsp;
            }
            |--@navigate.Name
        </option>
    if (navigate.Children.Any())
    {
        foreach (var childNavigate in navigate.Children.OrderBy(nav => nav.SortOrder))
        {
                @RenderParentNavigateOptions(childNavigate, level + 1)
        }
    }
}
}
<section class="content-header">
    <h1>
        @ModelDisplayName<small>@T("Edit")</small>
    </h1>
</section>
<section class="content">
    <div class="box">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            <div class="box-body">
                <div class="form-group">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "help-block" })
                </div>
                <div class="form-group">
                    <label class="control-label">上级导航</label>
                    <select class="form-control" name="ParentID">
                        <option value="">顶级导航</option>
                        @foreach (var headerNavigate in (ViewBag.Navigates as IEnumerable<NavigateModel>).Where(nav => nav.ParentID == null))
                        {
                            @RenderParentNavigateOptions(headerNavigate, 0)
                        }
                    </select>
                    @Html.ValidationMessageFor(model => model.ParentID, "", new { @class = "help-block" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ControllerName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ControllerName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ControllerName, "", new { @class = "help-block" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.ActionName, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.ActionName, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ActionName, "", new { @class = "help-block" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.IconClassCode, htmlAttributes: new { @class = "control-label" })
                    <div class="input-group">
                        @Html.EditorFor(model => model.IconClassCode, new { htmlAttributes = new { @class = "form-control" } })
                        <span class="input-group-btn">
                            <button class="btn btn-info btn-flat" id="select-icons" type="button"><i class="fa fa-search"></i></button>
                        </span>
                    </div>
                    @Html.ValidationMessageFor(model => model.IconClassCode, "", new { @class = "help-block" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.SortOrder, htmlAttributes: new { @class = "control-label" })
                    @Html.EditorFor(model => model.SortOrder, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.SortOrder, "", new { @class = "help-block" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Active, htmlAttributes: new { @class = "control-label" })
                    <div class="checkbox">
                        <label>
                            @Html.EditorFor(model => model.Active) 启用
                        </label>
                    </div>
                    @Html.ValidationMessageFor(model => model.Active, "", new { @class = "help-block" })
                </div>
            </div>
            <div class="box-footer">
                <input type="submit" value="@T("Save")" class="btn btn-primary" />
                @Html.ActionLink(T("Back"), "Index", null, new { @class = "btn btn-default" })
            </div>
        }
    </div>
</section>
@section Scripts{
    @Scripts.Render("~/scripts/jquery-validate-unobtrusive-bootstrap")
    <script>
        $("#select-icons").click(function () {
            var dialog = bootbox.dialog({
                title: '图标选择器',
                size: 'large',
                message: '<p><i class="fa fa-spin fa-spinner text-center"></i> Loading...</p>'
            });
            $.ajax({ url: '@Url.Action("icons")' }).done(function (result) {
                dialog.init(function () {
                    dialog.find('.bootbox-body').html(result);
                });
            });
        });
    </script>
}